from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import keyboards as kb
from database import *
from aiogram.utils.exceptions import BotBlocked
import dotenv
import os
import sqlite3 as sq

db = sq.connect('tg.db')
cur = db.cursor()

dotenv.load_dotenv()
storage = MemoryStorage()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    await db_start()


class AddItems(StatesGroup):
    category = State()
    type = State()
    name = State()
    desc = State()
    photo = State()
    price = State()


class DeleteItems(StatesGroup):
    number = State()


class AddToCart(StatesGroup):
    looking = State()
    adding = State()


class SendToAll(StatesGroup):
    creating = State()
    sending = State()


class UX(StatesGroup):
    check_catalog = State()
    check_items = State()
    check_item = State()


class Buy(StatesGroup):
    cart_check = State()
    number = State()
    name = State()
    address = State()


class BuyAll(StatesGroup):
    cart_check = State()
    number = State()
    name = State()
    address = State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!', reply_markup=kb.main)
    user = cur.execute("SELECT a_id FROM accounts WHERE a_id == '{key}'".format(key=message.from_user.id)).fetchone()
    if not user:
        cur.execute("INSERT INTO accounts VALUES(?, ?, ?, ?)", (message.from_user.id, '', '', ''))
        db.commit()
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üñ•', reply_markup=kb.admin_main)


@dp.message_handler(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤')
async def contacts(message: types.Message):
    await message.answer(f'–ü–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É:üì≤ +998903944839')


@dp.message_handler(text='–ù–∞–∑–∞–¥ ‚óÄÔ∏è', state='*')
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥ ‚óÄÔ∏è', reply_markup=kb.main)
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üñ•', reply_markup=kb.admin_main)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'backkk', state='*')
async def backkk(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥ ‚óÄÔ∏è', reply_markup=kb.main)
    if callback_query.from_user.id == int(os.getenv('ADMIN_ID')):
        await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üñ•',
                               reply_markup=kb.admin_main)


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚Ñ¢Ô∏è')
async def add_item(message: types.Message) -> None:
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await AddItems.category.set()
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=kb.category)
    else:
        await message.answer(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')


@dp.message_handler(state=AddItems.category)
async def add_category(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ üëî':
            data['category'] = 'man'
        elif message.text == '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ üëó':
            data['category'] = 'women'
        elif message.text == '–î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ üß§':
            data['category'] = 'kids'
        elif message.text == '–î–ª—è –≤—Å–µ—Ö':
            data['category'] = 'all'
    await message.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=kb.types)
    await AddItems.next()


@dp.message_handler(state=AddItems.type)
async def add_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == '–†—É–±–∞—à–∫–∏ üëî':
            data['type'] = 'man'
        elif message.text == '–ü–ª–∞—Ç—å—è üëó':
            data['type'] = 'women'
        elif message.text == '–ü–µ—Ä—á–∞—Ç–∫–∏ üß§':
            data['type'] = 'kids'
        elif message.text == '–û–±—É–≤—å üëü':
            data['type'] = 'shoes'
    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!)', reply_markup=kb.cancel)
    await AddItems.next()


@dp.message_handler(state=AddItems.name)
async def add_item_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text

    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!)')
    await AddItems.next()


@dp.message_handler(state=AddItems.desc)
async def add_item_desc(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['desc'] = message.text

    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ (–ò–ú–ï–ù–ù–û –§–û–¢–û)')
    await AddItems.next()


@dp.message_handler(lambda message: not message.photo, state=AddItems.photo)
async def add_item_check_photo(message: types.Message) -> None:
    await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')


@dp.message_handler(content_types=['photo'], state=AddItems.photo)
async def add_item_load_photo(message: types.Message, state: FSMContext) -> None:
    list_photo = []
    for ph in message.photo:
        list_photo.append(ph[-1].file_id)
        print(ph[-1].file_id)
    print(list_photo)
    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞! –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!)')
    await AddItems.next()


@dp.message_handler(state=AddItems.price)
async def add_item_price(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['price'] = message.text
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=data['photo'],
                             caption=f"{data['name']}, {data['desc']}\n{data['price']}")
    await create_tovar(state)
    await message.reply('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', reply_markup=kb.admin_main)
    await state.finish()


@dp.message_handler(text='–ö–∞—Ç–∞–ª–æ–≥ üëî')
async def catalog(message: types.Message) -> None:
    cur.execute("SELECT name FROM items")
    items = cur.fetchall()
    if not items:
        await message.answer(f'–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç! üëî')
    else:
        await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ üëî.', reply_markup=ReplyKeyboardRemove())
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=kb.catalog_buttons())
        await UX.check_catalog.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'add_to_cart', state=UX.check_item)
async def add_to_cart(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    async with state.proxy() as data:
        cur.execute("INSERT INTO cart (tg_id, i_id) VALUES (?, ?)", (callback_query.from_user.id, data['tovar']))
        db.commit()
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! üóë',
                               reply_markup=kb.main)
        await state.finish()


@dp.callback_query_handler(state=UX.check_catalog)
async def by_cat(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, text='–¢–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
                           reply_markup=kb.items_buttons(callback_query.data))
    await UX.check_items.set()


@dp.callback_query_handler(state=UX.check_items)
async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext):
    await UX.check_item.set()
    cur.execute("SELECT * FROM items WHERE i_id == '{key}'".format(key=callback_query.data))
    item = cur.fetchall()
    await bot.send_photo(callback_query.from_user.id, photo=item[0][4],
                         caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {item[0][1]}!\n\n"
                                 f"{item[0][2]}\n\n"
                                 f"–¶–µ–Ω–∞: {item[0][3]} —Å—É–º", reply_markup=kb.add_to_cart)
    await UX.check_item.set()
    async with state.proxy() as data:
        data['tovar'] = item[0][0]


@dp.message_handler(text='–ö–æ—Ä–∑–∏–Ω–∞ üóë')
async def catalog(message: types.Message, state: FSMContext) -> None:
    cur.execute("SELECT * FROM cart WHERE tg_id == {key}".format(key=message.from_user.id))
    item = cur.fetchall()
    print(item)
    if item == []:
        await message.answer(f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! üóë')
    else:
        for tovar in item:
            cur.execute("SELECT * FROM items WHERE i_id == {key}".format(key=int(tovar[2])))
            tovar = cur.fetchall()
            await message.answer(f'–¢–æ–≤–∞—Ä: {tovar[0][1]}\n–¶–µ–Ω–∞: {tovar[0][3]} —Å—É–º', reply_markup=kb.buy)
            async with state.proxy() as buy_that:
                buy_that['tovar'] = tovar[0][1]
                buy_that['tovar_id'] = tovar[0][0]
                buy_that['user_id'] = message.from_user.id
                buy_that['photo'] = tovar[0][4]
                buy_that['price'] = tovar[0][3]


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'buy')
async def buy(callback_query: types.CallbackQuery):
    await Buy.number.set()
    await bot.send_message(callback_query.from_user.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.cancel)


@dp.message_handler(state=Buy.number)
async def buy_name_set(message: types.Message, state: FSMContext):
    async with state.proxy() as buy_that:
        buy_that['number'] = message.text
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è', reply_markup=kb.cancel)
    await Buy.next()


@dp.message_handler(state=Buy.name)
async def buy_number_set(message: types.Message, state: FSMContext):
    async with state.proxy() as buy_that:
        buy_that['name'] = message.text
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å', reply_markup=kb.location)
    await Buy.next()


@dp.message_handler(content_types=['location'], state=Buy.address)
async def buy_address_set(message: types.Message, state: FSMContext):
    async with state.proxy() as buy_that:
        buy_that['address'] = message.text
        await bot.send_photo(chat_id=int(os.getenv('GROUP_ID')), photo=buy_that['photo'], caption=f'–ö—É–ø–∏–ª–∏ üõí: \n'
                                                                                                  f'–¶–µ–Ω–∞: {buy_that["price"]}\n'
                                                                                                  f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {buy_that["number"]}\n'
                                                                                                  f'–ò–º—è: {buy_that["name"]}\n')

        await message.forward(chat_id=int(os.getenv('GROUP_ID')))

        cur.execute("DELETE FROM cart WHERE i_id == {key} AND tg_id == {key2}".format(key=int(buy_that['tovar_id']),
                                                                                      key2=int(buy_that['user_id'])))
        db.commit()
    await message.answer(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ üì≤',
                         reply_markup=kb.main)
    await state.finish()


"""
–ü–û–ö–£–ü–ö–ê –í–°–ï–ì–û
"""


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'buy_all')
async def buy_all(callback_query: types.CallbackQuery):
    await BuyAll.number.set()
    await bot.send_message(callback_query.from_user.id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.cancel)


@dp.message_handler(state=BuyAll.number)
async def buy_all_name_set(message: types.Message, state: FSMContext):
    async with state.proxy() as buy_that:
        buy_that['number'] = message.text
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è', reply_markup=kb.cancel)
    await BuyAll.next()


@dp.message_handler(state=BuyAll.name)
async def buy_all_number_set(message: types.Message, state: FSMContext):
    async with state.proxy() as buy_that:
        buy_that['name'] = message.text
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å', reply_markup=kb.location)
    await BuyAll.next()


@dp.message_handler(content_types=['location'], state=BuyAll.address)
async def buy_all_address_set(message: types.Message, state: FSMContext):
    async with state.proxy() as buy_that:
        buy_that['address'] = message.text

        users_cart = await require_tovar(message.from_user.id)
        for item in users_cart:
            print(item)
            about_item = await check_tovar(item[2])
            print(about_item)
            await bot.send_photo(chat_id=int(os.getenv('GROUP_ID')), photo=about_item[4],
                                 caption=f'–ö—É–ø–∏–ª–∏ üõí: '
                                         f'{about_item[1]}\n'
                                         f'–¶–µ–Ω–∞: {about_item[3]}\n'
                                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {buy_that["number"]}\n'
                                         f'–ò–º—è: {buy_that["name"]}\n')
            #
            cur.execute("DELETE FROM cart WHERE i_id == {key} AND tg_id == {key2}".format(key=int(item[2]),
                                                                                          key2=int(
                                                                                              buy_that['user_id'])))
            db.commit()
        await message.forward(chat_id=int(os.getenv('GROUP_ID')))
    await message.answer(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ üì≤',
                         reply_markup=kb.main)
    await state.finish()


@dp.message_handler(text='–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def send_for_all(message: types.Message) -> None:
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await SendToAll.creating.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=kb.cancel)
    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')


@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked_handler(update: types.Update, exception: BotBlocked) -> bool:
    print('–Æ–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç')
    return True


@dp.message_handler(state=SendToAll.creating)
async def sent_for_all(message: types.Message, state: FSMContext):
    await SendToAll.sending.set()
    cur.execute("SELECT a_id FROM accounts")
    accs = cur.fetchall()
    for i in accs:
        try:
            await bot.send_message(i[0], message.text)
        except Exception as error:
            cur.execute("DELETE FROM accounts WHERE a_id == {key}".format(key=i[0]))
            db.commit()
            print(error)
    await state.finish()
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=kb.admin_main)


@dp.message_handler(text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üñ•')
async def admin_panel(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. üñ•', reply_markup=kb.admin_panel)
    else:
        await message.answer(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üóë')
async def delete_item(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await DeleteItems.number.set()
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=kb.deleting())
    else:
        await message.answer(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')


@dp.callback_query_handler(state=DeleteItems.number)
async def delete_item_done(callback_query: types.CallbackQuery, state: FSMContext):
    cur.execute("DELETE FROM items WHERE i_id == {key}".format(key=callback_query.data))
    db.commit()
    await bot.send_message(callback_query.from_user.id, f'–£–¥–∞–ª–µ–Ω–æ!', reply_markup=kb.admin_panel)
    await state.finish()


@dp.message_handler()
async def none(message: types.Message):
    await message.answer(message.chat.id)


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)